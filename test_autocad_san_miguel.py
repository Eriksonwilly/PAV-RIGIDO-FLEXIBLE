#!/usr/bin/env python3
"""
Test espec√≠fico para el bot√≥n Exportar AutoCAD - San Miguel Puno
Verifica que el bot√≥n genere correctamente los datos para AutoCAD
"""

import numpy as np
from datetime import datetime
import os

def test_autocad_generation():
    """Test de generaci√≥n de datos AutoCAD para San Miguel"""
    print("üèóÔ∏è Probando generaci√≥n de datos AutoCAD para San Miguel...")
    
    try:
        # Datos por defecto de San Miguel 1 cuadra
        proyecto_san_miguel = "San Miguel Puno - Cuadra 1"
        ubicacion = "San Miguel, Puno, Per√∫"
        coordenadas = "-15.8422¬∞S, -70.0199¬∞W"
        elevacion_base = 3805  # msnm
        area_longitud = 100  # metros
        area_ancho = 8       # metros
        pendiente = 5.2      # porcentaje
        
        # Crear malla de puntos para el terreno (100m x 8m)
        x_coords = np.linspace(0, area_longitud, 101)  # 101 puntos cada 1m
        y_coords = np.linspace(0, area_ancho, 9)       # 9 puntos cada 1m
        
        # Crear malla de puntos
        X, Y = np.meshgrid(x_coords, y_coords)
        
        # Elevaci√≥n base de San Miguel con variaci√≥n realista
        # Simular pendiente del 5.2% y variaciones del terreno
        Z_base = elevacion_base + (X * pendiente / 100) + 0.1 * np.sin(X/10) + 0.05 * np.cos(Y/2)
        
        # Convertir a lista de puntos [x, y, z]
        points_data = []
        for i in range(X.shape[0]):
            for j in range(X.shape[1]):
                points_data.append([X[i,j], Y[i,j], Z_base[i,j]])
        
        # Crear archivo de puntos para AutoCAD con formato profesional
        autocad_content = f"""# AutoCAD Point Cloud Data - San Miguel, Puno
# Generated by CONSORCIO DEJ Software - Pavimento Design System
# Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
# Project: {proyecto_san_miguel}
# Location: {ubicacion}
# Coordinates: {coordenadas}
# Elevation Base: {elevacion_base} msnm
# Area: {area_longitud}m x {area_ancho}m = {area_longitud * area_ancho / 10000:.2f} ha
# Slope: {pendiente}%
# Total Points: {len(points_data)}

# Format: X, Y, Z, Description, Layer
# Coordinates in meters, UTM Zone 19S
# X = Easting, Y = Northing, Z = Elevation

# ========================================
# GROUND POINTS (Terreno Natural)
# ========================================
"""
        
        # Agregar puntos del terreno
        for i, point in enumerate(points_data[:1000]):  # L√≠mite de 1000 puntos
            autocad_content += f"{point[0]:.3f}, {point[1]:.3f}, {point[2]:.3f}, Ground, TERRAIN\n"
        
        # Agregar puntos de cunetas laterales
        autocad_content += f"""
# ========================================
# DRAINAGE POINTS (Cunetas Laterales)
# ========================================
# Cuneta izquierda (Y=0)
# Cuneta derecha (Y={area_ancho})
"""
        
        for i in range(0, area_longitud + 1, 5):  # Cada 5m
            # Cuneta izquierda
            z_cuneta_izq = elevacion_base + (i * pendiente / 100) + 0.1 * np.sin(i/10) - 0.15
            autocad_content += f"{i:.3f}, 0.0, {z_cuneta_izq:.3f}, Cuneta_Izq, DRAINAGE\n"
            
            # Cuneta derecha
            z_cuneta_der = elevacion_base + (i * pendiente / 100) + 0.1 * np.sin(i/10) - 0.15
            autocad_content += f"{i:.3f}, {area_ancho:.1f}, {z_cuneta_der:.3f}, Cuneta_Der, DRAINAGE\n"
        
        # Agregar puntos de juntas de contracci√≥n
        autocad_content += f"""
# ========================================
# JOINT POINTS (Juntas de Contracci√≥n)
# ========================================
# Espaciado: 12m seg√∫n normativa PCA
"""
        
        for i in range(0, area_longitud + 1, 12):  # Juntas cada 12m
            z_junta = elevacion_base + (i * pendiente / 100) + 0.1 * np.sin(i/10)
            autocad_content += f"{i:.3f}, {area_ancho/2:.1f}, {z_junta:.3f}, Junta_Contraccion, JOINTS\n"
        
        # Agregar puntos de pavimento
        autocad_content += f"""
# ========================================
# PAVEMENT POINTS (Pavimento)
# ========================================
# Espesor de pavimento: 200mm (estimado)
"""
        
        for i in range(0, area_longitud + 1, 10):  # Cada 10m
            for j in range(1, area_ancho, 2):  # Cada 2m
                z_pavimento = elevacion_base + (i * pendiente / 100) + 0.1 * np.sin(i/10) + 0.2
                autocad_content += f"{i:.3f}, {j:.1f}, {z_pavimento:.3f}, Pavimento, PAVEMENT\n"
        
        # Agregar puntos de referencia
        autocad_content += f"""
# ========================================
# REFERENCE POINTS (Puntos de Referencia)
# ========================================
# Puntos de control y referencia
"""
        
        # Puntos de referencia importantes
        puntos_ref = [
            (0, 0, elevacion_base, "Punto_Inicio"),
            (area_longitud, 0, elevacion_base + (area_longitud * pendiente / 100), "Punto_Fin_Izq"),
            (0, area_ancho, elevacion_base, "Punto_Inicio_Der"),
            (area_longitud, area_ancho, elevacion_base + (area_longitud * pendiente / 100), "Punto_Fin_Der"),
            (area_longitud/2, area_ancho/2, elevacion_base + (area_longitud/2 * pendiente / 100), "Punto_Centro")
        ]
        
        for x, y, z, desc in puntos_ref:
            autocad_content += f"{x:.3f}, {y:.3f}, {z:.3f}, {desc}, REFERENCE\n"
        
        # Agregar informaci√≥n t√©cnica
        autocad_content += f"""
# ========================================
# TECHNICAL INFORMATION
# ========================================
# Project: {proyecto_san_miguel}
# Location: {ubicacion}
# Coordinates: {coordenadas}
# Elevation Base: {elevacion_base} msnm
# Area: {area_longitud}m x {area_ancho}m = {area_longitud * area_ancho / 10000:.2f} ha
# Slope: {pendiente}%
# Design Standards: AASHTO 93, PCA, MTC
# Software: CONSORCIO DEJ - Pavimento Design System
# Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

# LAYERS:
# - TERRAIN: Puntos del terreno natural
# - DRAINAGE: Puntos de cunetas y drenaje
# - JOINTS: Puntos de juntas de contracci√≥n
# - PAVEMENT: Puntos del pavimento
# - REFERENCE: Puntos de referencia y control

# NOTES:
# - Coordenadas en UTM Zone 19S
# - Elevaciones en metros sobre el nivel del mar
# - Pendiente promedio: {pendiente}%
# - Cunetas laterales con profundidad de 0.15m
# - Juntas de contracci√≥n cada 12m seg√∫n PCA
# - Espesor de pavimento estimado: 200mm
"""
        
        # Guardar archivo
        with open("test_autocad_san_miguel_mejorado.txt", "w", encoding="utf-8") as f:
            f.write(autocad_content)
        
        print("‚úÖ Archivo AutoCAD generado exitosamente: test_autocad_san_miguel_mejorado.txt")
        
        # Mostrar estad√≠sticas
        total_puntos = len(points_data) + 50  # Aproximado
        print(f"üìä Estad√≠sticas del archivo:")
        print(f"  ‚Ä¢ Proyecto: {proyecto_san_miguel}")
        print(f"  ‚Ä¢ Ubicaci√≥n: {ubicacion}")
        print(f"  ‚Ä¢ Coordenadas: {coordenadas}")
        print(f"  ‚Ä¢ Elevaci√≥n base: {elevacion_base} msnm")
        print(f"  ‚Ä¢ √Årea: {area_longitud}m x {area_ancho}m = {area_longitud * area_ancho / 10000:.2f} ha")
        print(f"  ‚Ä¢ Pendiente: {pendiente}%")
        print(f"  ‚Ä¢ Total de puntos: {total_puntos} (aproximado)")
        print(f"  ‚Ä¢ Capas incluidas: Terreno, Drenaje, Juntas, Pavimento, Referencia")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test AutoCAD: {str(e)}")
        return False

def verify_autocad_file():
    """Verificar que el archivo AutoCAD se haya generado correctamente"""
    print("\nüîç Verificando archivo AutoCAD generado...")
    
    try:
        filename = "test_autocad_san_miguel_mejorado.txt"
        
        if not os.path.exists(filename):
            print(f"‚ùå Archivo {filename} no encontrado")
            return False
        
        # Leer archivo y verificar contenido
        with open(filename, "r", encoding="utf-8") as f:
            content = f.read()
        
        # Verificar elementos clave
        checks = [
            ("San Miguel Puno - Cuadra 1", "Nombre del proyecto"),
            ("San Miguel, Puno, Per√∫", "Ubicaci√≥n"),
            ("-15.8422¬∞S, -70.0199¬∞W", "Coordenadas"),
            ("3805 msnm", "Elevaci√≥n base"),
            ("TERRAIN", "Capa de terreno"),
            ("DRAINAGE", "Capa de drenaje"),
            ("JOINTS", "Capa de juntas"),
            ("PAVEMENT", "Capa de pavimento"),
            ("REFERENCE", "Capa de referencia"),
            ("AASHTO 93, PCA, MTC", "Normativas"),
            ("UTM Zone 19S", "Sistema de coordenadas")
        ]
        
        passed_checks = 0
        for check_text, description in checks:
            if check_text in content:
                print(f"  ‚úÖ {description}: OK")
                passed_checks += 1
            else:
                print(f"  ‚ùå {description}: NO ENCONTRADO")
        
        # Verificar tama√±o del archivo
        file_size = os.path.getsize(filename)
        print(f"  üìÅ Tama√±o del archivo: {file_size} bytes")
        
        # Verificar l√≠neas de datos
        lines = content.split('\n')
        data_lines = [line for line in lines if ',' in line and not line.startswith('#')]
        print(f"  üìä L√≠neas de datos: {len(data_lines)}")
        
        print(f"\nüéØ Resultado: {passed_checks}/{len(checks)} verificaciones pasaron")
        
        if passed_checks == len(checks) and file_size > 1000:
            print("‚úÖ Archivo AutoCAD verificado correctamente")
            return True
        else:
            print("‚ö†Ô∏è Archivo AutoCAD tiene algunos problemas")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando archivo: {str(e)}")
        return False

def main():
    """Funci√≥n principal de pruebas AutoCAD"""
    print("üèóÔ∏è Iniciando pruebas de AutoCAD para San Miguel Puno - Cuadra 1")
    print("=" * 70)
    
    # Ejecutar pruebas
    generation_ok = test_autocad_generation()
    verification_ok = verify_autocad_file()
    
    # Mostrar resumen
    print("\n" + "=" * 70)
    print("üìä RESUMEN DE PRUEBAS AUTOCAD")
    print("=" * 70)
    
    print(f"üèóÔ∏è Generaci√≥n de datos: {'‚úÖ EXITOSA' if generation_ok else '‚ùå FALLIDA'}")
    print(f"üîç Verificaci√≥n de archivo: {'‚úÖ EXITOSA' if verification_ok else '‚ùå FALLIDA'}")
    
    if generation_ok and verification_ok:
        print("\nüéâ ¬°Todas las pruebas de AutoCAD pasaron!")
        print("üí° El bot√≥n 'Exportar AutoCAD' est√° funcionando correctamente")
        print("üîß Los datos est√°n listos para importar en AutoCAD Civil 3D")
    else:
        print("\n‚ö†Ô∏è Algunas pruebas de AutoCAD fallaron")
        print("üîß Revisar los errores anteriores")
    
    # Listar archivos generados
    print("\nüìÅ Archivos generados:")
    autocad_files = [
        "test_autocad_san_miguel_mejorado.txt",
        "test_autocad_san_miguel.txt"
    ]
    
    for archivo in autocad_files:
        if os.path.exists(archivo):
            size = os.path.getsize(archivo)
            print(f"  ‚úÖ {archivo} ({size} bytes)")
        else:
            print(f"  ‚ùå {archivo} (no encontrado)")

if __name__ == "__main__":
    main() 