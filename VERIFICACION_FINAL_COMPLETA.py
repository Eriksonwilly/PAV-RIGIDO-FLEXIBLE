#!/usr/bin/env python3
"""
VERIFICACI√ìN FINAL COMPLETA - APP PAVIMENTOS
============================================

Script de verificaci√≥n integral para asegurar que toda la aplicaci√≥n
funcione correctamente antes del despliegue final.
"""

import sys
import os
import json
from datetime import datetime

def test_imports():
    """Prueba todas las importaciones necesarias"""
    print("üîç VERIFICANDO IMPORTACIONES...")
    print("-" * 40)
    
    imports = [
        ('streamlit', 'st'),
        ('numpy', 'np'),
        ('matplotlib.pyplot', 'plt'),
        ('pandas', 'pd'),
        ('reportlab', 'reportlab'),
        ('plotly', 'plotly'),
        ('json', 'json'),
        ('datetime', 'datetime'),
        ('io', 'BytesIO'),
        ('base64', 'base64')
    ]
    
    results = []
    for module_name, import_name in imports:
        try:
            __import__(import_name)
            print(f"‚úÖ {module_name}: OK")
            results.append(True)
        except ImportError:
            print(f"‚ùå {module_name}: FALTA")
            results.append(False)
    
    return results

def test_san_miguel_module():
    """Prueba el m√≥dulo de caso pr√°ctico San Miguel"""
    print("\nüîç VERIFICANDO M√ìDULO SAN MIGUEL...")
    print("-" * 40)
    
    try:
        from CASO_PRACTICO_SAN_MIGUEL_COMPLETO import CasoPracticoSanMiguel, EnhancedJSONEncoder
        print("‚úÖ Importaci√≥n de CasoPracticoSanMiguel: OK")
        print("‚úÖ Importaci√≥n de EnhancedJSONEncoder: OK")
        
        # Probar la creaci√≥n de instancia
        caso = CasoPracticoSanMiguel()
        print("‚úÖ Creaci√≥n de instancia: OK")
        
        # Probar la ejecuci√≥n completa
        print("üèóÔ∏è Ejecutando caso pr√°ctico...")
        resultado = caso.ejecutar_caso_completo()
        
        if "error" not in resultado:
            print("‚úÖ Ejecuci√≥n del caso pr√°ctico: OK")
            print(f"üìä Proyecto: {resultado['resumen_ejecutivo']['proyecto']}")
            print(f"üìç Ubicaci√≥n: {resultado['resumen_ejecutivo']['ubicacion']}")
            print(f"üèóÔ∏è Tipo Pavimento: {resultado['resumen_ejecutivo']['tipo_pavimento_recomendado']}")
            print(f"üìè Espesor: {resultado['resumen_ejecutivo']['espesor_recomendado']}")
            print(f"üí∞ Costo: {resultado['resumen_ejecutivo']['costo_estimado']}")
            print(f"‚è±Ô∏è Duraci√≥n: {resultado['resumen_ejecutivo']['duracion_obra']}")
            print(f"üìÅ Archivos generados: {len(resultado['archivos_generados'])}")
            
            # Verificar que se guardaron los archivos
            if os.path.exists("resultados_san_miguel"):
                print("‚úÖ Directorio de resultados creado: OK")
                if os.path.exists("resultados_san_miguel/reporte_completo.json"):
                    print("‚úÖ Archivo JSON guardado: OK")
                if os.path.exists("resultados_san_miguel/resumen_ejecutivo.txt"):
                    print("‚úÖ Archivo TXT guardado: OK")
            
            return True
        else:
            print(f"‚ùå Error en caso pr√°ctico: {resultado['error']}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en m√≥dulo San Miguel: {e}")
        return False

def test_streamlit_compatibility():
    """Prueba la compatibilidad con Streamlit"""
    print("\nüîç VERIFICANDO COMPATIBILIDAD STREAMLIT...")
    print("-" * 40)
    
    try:
        import streamlit as st
        print("‚úÖ Streamlit disponible")
        
        # Verificar funciones modernas
        if hasattr(st, 'rerun'):
            print("‚úÖ st.rerun() disponible (versi√≥n moderna)")
        else:
            print("‚ö†Ô∏è st.rerun() no disponible")
            
        if hasattr(st, 'experimental_rerun'):
            print("‚ö†Ô∏è st.experimental_rerun() disponible (versi√≥n antigua)")
        else:
            print("‚úÖ st.experimental_rerun() no disponible (correcto)")
            
        # Verificar otras funciones importantes
        required_functions = [
            'set_page_config', 'header', 'subheader', 'info', 'warning', 'error',
            'success', 'button', 'form', 'form_submit_button', 'text_input',
            'number_input', 'selectbox', 'radio', 'checkbox', 'data_editor',
            'columns', 'container', 'spinner', 'metric', 'download_button',
            'tabs', 'divider', 'markdown', 'caption', 'stop'
        ]
        
        missing_functions = []
        for func in required_functions:
            if not hasattr(st, func):
                missing_functions.append(func)
        
        if missing_functions:
            print(f"‚ùå Funciones faltantes: {missing_functions}")
            return False
        else:
            print("‚úÖ Todas las funciones de Streamlit disponibles: OK")
            return True
            
    except ImportError:
        print("‚ùå Streamlit no est√° instalado")
        return False

def test_app_structure():
    """Prueba la estructura de la aplicaci√≥n"""
    print("\nüîç VERIFICANDO ESTRUCTURA DE LA APP...")
    print("-" * 40)
    
    required_files = [
        'APP.py',
        'CASO_PRACTICO_SAN_MIGUEL_COMPLETO.py',
        'requirements.txt',
        'README.md'
    ]
    
    optional_files = [
        'MODULO_LIDAR_DRONES.py',
        'MODULO_DISENO_AUTOMATIZADO.py',
        'MODULO_INTEROPERABILIDAD.py',
        'MODULO_GOOGLE_EARTH_ENGINE.py',
        'MODULO_LIDAR_AVANZADO.py',
        'MODULO_EXPORTACION_EXTERNA.py'
    ]
    
    results = []
    
    # Verificar archivos requeridos
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}: OK")
            results.append(True)
        else:
            print(f"‚ùå {file}: FALTA")
            results.append(False)
    
    # Verificar archivos opcionales
    for file in optional_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}: OK (opcional)")
        else:
            print(f"‚ö†Ô∏è {file}: No disponible (opcional)")
    
    return all(results)

def test_json_serialization():
    """Prueba la serializaci√≥n JSON con el encoder mejorado"""
    print("\nüîç VERIFICANDO SERIALIZACI√ìN JSON...")
    print("-" * 40)
    
    try:
        from CASO_PRACTICO_SAN_MIGUEL_COMPLETO import EnhancedJSONEncoder
        
        # Crear datos de prueba con tipos problem√°ticos
        test_data = {
            'string': 'test',
            'number': 123,
            'boolean': True,
            'list': [1, 2, 3],
            'dict': {'key': 'value'},
            'none': None,
            'complex_object': object(),  # Objeto no serializable
            'function': lambda x: x,     # Funci√≥n no serializable
        }
        
        # Intentar serializar
        json_str = json.dumps(test_data, cls=EnhancedJSONEncoder, indent=2)
        print("‚úÖ Serializaci√≥n JSON con encoder mejorado: OK")
        
        # Verificar que se puede deserializar
        parsed_data = json.loads(json_str)
        print("‚úÖ Deserializaci√≥n JSON: OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en serializaci√≥n JSON: {e}")
        return False

def generate_final_report(results):
    """Genera un reporte final de verificaci√≥n"""
    print("\n" + "=" * 60)
    print("üìä REPORTE FINAL DE VERIFICACI√ìN")
    print("=" * 60)
    
    test_names = [
        "Importaciones",
        "M√≥dulo San Miguel", 
        "Compatibilidad Streamlit",
        "Estructura de la App",
        "Serializaci√≥n JSON"
    ]
    
    passed = 0
    total = len(results)
    
    for i, (test_name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{i+1}. {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ Resultado: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("\nüéâ ¬°VERIFICACI√ìN COMPLETA EXITOSA!")
        print("‚úÖ La aplicaci√≥n est√° lista para producci√≥n")
        print("‚úÖ El caso pr√°ctico San Miguel funciona correctamente")
        print("‚úÖ La serializaci√≥n JSON est√° corregida")
        print("‚úÖ Streamlit es compatible")
        print("\nüí° Para ejecutar la app:")
        print("   python -m streamlit run APP.py --server.port 8501")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} pruebas fallaron")
        print("üí° Revisa los errores arriba e instala las dependencias faltantes:")
        print("   pip install -r requirements.txt")
    
    # Guardar reporte
    report_data = {
        'fecha': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'resultados': dict(zip(test_names, results)),
        'total_passed': passed,
        'total_tests': total,
        'status': 'EXITOSO' if passed == total else 'CON ERRORES'
    }
    
    with open('verificacion_final_report.json', 'w', encoding='utf-8') as f:
        json.dump(report_data, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ Reporte guardado en: verificacion_final_report.json")

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üß™ VERIFICACI√ìN FINAL COMPLETA - APP PAVIMENTOS")
    print("Sistema de Dise√±o de Pavimentos R√≠gido y Flexible")
    print("=" * 70)
    
    # Ejecutar todas las pruebas
    tests = [
        test_imports(),
        test_san_miguel_module(),
        test_streamlit_compatibility(),
        test_app_structure(),
        test_json_serialization()
    ]
    
    # Generar reporte final
    generate_final_report(tests)

if __name__ == "__main__":
    main() 